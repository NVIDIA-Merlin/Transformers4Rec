{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c7783917",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Copyright 2022 NVIDIA Corporation. All Rights Reserved.\n",
    "#\n",
    "# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
    "# you may not use this file except in compliance with the License.\n",
    "# You may obtain a copy of the License at\n",
    "#\n",
    "#     http://www.apache.org/licenses/LICENSE-2.0\n",
    "#\n",
    "# Unless required by applicable law or agreed to in writing, software\n",
    "# distributed under the License is distributed on an \"AS IS\" BASIS,\n",
    "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
    "# See the License for the specific language governing permissions and\n",
    "# limitations under the License.\n",
    "# ======="
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ba6b360",
   "metadata": {},
   "source": [
    "<img src=\"https://developer.download.nvidia.com/notebooks/dlsw-notebooks/merlin_transformers4rec_getting-started-session-based-01-etl-with-nvtabular/nvidia_logo.png\" style=\"width: 90px; float: right;\">\n",
    "\n",
    "# ETL with NVTabular"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab6085c0",
   "metadata": {},
   "source": [
    "In this notebook we are going to generate synthetic data and then create sequential features with [NVTabular](https://github.com/NVIDIA-Merlin/NVTabular). Such data will be used in the next notebook to train a session-based recommendation model.\n",
    "\n",
    "NVTabular is a feature engineering and preprocessing library for tabular data designed to quickly and easily manipulate terabyte scale datasets used to train deep learning based recommender systems. It provides a high level abstraction to simplify code and accelerates computation on the GPU using the RAPIDS cuDF library."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "add26d16",
   "metadata": {},
   "source": [
    "### Import required libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1e8dae24",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import glob\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import cudf\n",
    "import cupy as cp\n",
    "import nvtabular as nvt\n",
    "from nvtabular.ops import *\n",
    "from merlin.schema.tags import Tags"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3206b3f",
   "metadata": {},
   "source": [
    "### Define Input/Output Path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "105dd71c",
   "metadata": {},
   "outputs": [],
   "source": [
    "INPUT_DATA_DIR = os.environ.get(\"INPUT_DATA_DIR\", \"/workspace/data/\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36498a01",
   "metadata": {},
   "source": [
    "## Create a Synthetic Input Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "929036ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "NUM_ROWS = 10000000\n",
    "long_tailed_item_distribution = np.clip(np.random.lognormal(3., 1., NUM_ROWS).astype(np.int32), 1, 50000)\n",
    "\n",
    "# generate random item interaction features \n",
    "df = pd.DataFrame(np.random.randint(70000, 90000, NUM_ROWS), columns=['session_id'])\n",
    "df['item_id'] = long_tailed_item_distribution\n",
    "\n",
    "# generate category mapping for each item-id\n",
    "df['category'] = pd.cut(df['item_id'], bins=334, labels=np.arange(1, 335)).astype(np.int32)\n",
    "df['timestamp/age_days'] = np.random.uniform(0, 1, NUM_ROWS)\n",
    "df['timestamp/weekday/sin']= np.random.uniform(0, 1, NUM_ROWS)\n",
    "\n",
    "# generate day mapping for each session \n",
    "map_day = dict(zip(df.session_id.unique(), np.random.randint(1, 10, size=(df.session_id.nunique()))))\n",
    "df['day'] =  df.session_id.map(map_day)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd861fcd",
   "metadata": {},
   "source": [
    "- Visualize couple of rows of the synthetic dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9617e30c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>session_id</th>\n",
       "      <th>item_id</th>\n",
       "      <th>category</th>\n",
       "      <th>timestamp/age_days</th>\n",
       "      <th>timestamp/weekday/sin</th>\n",
       "      <th>day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>79895</td>\n",
       "      <td>72</td>\n",
       "      <td>7</td>\n",
       "      <td>0.575559</td>\n",
       "      <td>0.463627</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>72384</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>0.423588</td>\n",
       "      <td>0.439379</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>80895</td>\n",
       "      <td>26</td>\n",
       "      <td>3</td>\n",
       "      <td>0.257796</td>\n",
       "      <td>0.793980</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>70485</td>\n",
       "      <td>17</td>\n",
       "      <td>2</td>\n",
       "      <td>0.354155</td>\n",
       "      <td>0.121522</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>87857</td>\n",
       "      <td>142</td>\n",
       "      <td>12</td>\n",
       "      <td>0.930029</td>\n",
       "      <td>0.894743</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   session_id  item_id  category  timestamp/age_days  timestamp/weekday/sin  \\\n",
       "0       79895       72         7            0.575559               0.463627   \n",
       "1       72384        8         1            0.423588               0.439379   \n",
       "2       80895       26         3            0.257796               0.793980   \n",
       "3       70485       17         2            0.354155               0.121522   \n",
       "4       87857      142        12            0.930029               0.894743   \n",
       "\n",
       "   day  \n",
       "0    5  \n",
       "1    9  \n",
       "2    9  \n",
       "3    2  \n",
       "4    8  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fae36e04",
   "metadata": {},
   "source": [
    "## Feature Engineering with NVTabular"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "139de226",
   "metadata": {},
   "source": [
    "Deep Learning models require dense input features. Categorical features are sparse, and need to be represented by dense embeddings in the model. To allow for that, categorical features need first to be encoded as contiguous integers `(0, ..., |C|)`, where `|C|` is the feature cardinality (number of unique values), so that their embeddings can be efficiently stored in embedding layers.  We will use NVTabular to preprocess the categorical features, so that all categorical columns are encoded as contiguous integers.  Note that in the `Categorify` op we set `start_index=1`, the reason for that we want the encoded null values to start from `1` instead of `0` because we reserve `0` for padding the sequence features."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55b3bb9c",
   "metadata": {},
   "source": [
    "Here our goal is to create sequential features.  In this cell, we are creating temporal features and grouping them together at the session level, sorting the interactions by time. Note that we also trim each feature sequence in a  session to a certain length. Here, we use the NVTabular library so that we can easily preprocess and create features on GPU with a few lines."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a256f195",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.8/dist-packages/cudf/core/frame.py:384: UserWarning: The deep parameter is ignored and is only included for pandas compatibility.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "# Categorify categorical features\n",
    "categ_feats = ['session_id', 'item_id', 'category'] >> nvt.ops.Categorify(start_index=1)\n",
    "\n",
    "# Define Groupby Workflow\n",
    "groupby_feats = categ_feats + ['day', 'timestamp/age_days', 'timestamp/weekday/sin']\n",
    "\n",
    "# Groups interaction features by session and sorted by timestamp\n",
    "groupby_features = groupby_feats >> nvt.ops.Groupby(\n",
    "    groupby_cols=[\"session_id\"], \n",
    "    aggs={\n",
    "        \"item_id\": [\"list\", \"count\"],\n",
    "        \"category\": [\"list\"],     \n",
    "        \"day\": [\"first\"],\n",
    "        \"timestamp/age_days\": [\"list\"],\n",
    "        'timestamp/weekday/sin': [\"list\"],\n",
    "        },\n",
    "    name_sep=\"-\")\n",
    "\n",
    "# Select and truncate the sequential features\n",
    "sequence_features_truncated = (groupby_features['category-list']) >> nvt.ops.ListSlice(0,20) >> nvt.ops.Rename(postfix = '_trim')\n",
    "\n",
    "sequence_features_truncated_item = (\n",
    "    groupby_features['item_id-list']\n",
    "    >> nvt.ops.ListSlice(0,20) \n",
    "    >> nvt.ops.Rename(postfix = '_trim')\n",
    "    >> TagAsItemID()\n",
    ")  \n",
    "sequence_features_truncated_cont = (\n",
    "    groupby_features['timestamp/age_days-list', 'timestamp/weekday/sin-list'] \n",
    "    >> nvt.ops.ListSlice(0,20) \n",
    "    >> nvt.ops.Rename(postfix = '_trim')\n",
    "    >> nvt.ops.AddMetadata(tags=[Tags.CONTINUOUS])\n",
    ")\n",
    "\n",
    "# Filter out sessions with length 1 (not valid for next-item prediction training and evaluation)\n",
    "MINIMUM_SESSION_LENGTH = 2\n",
    "selected_features = (\n",
    "    groupby_features['item_id-count', 'day-first', 'session_id'] + \n",
    "    sequence_features_truncated_item +\n",
    "    sequence_features_truncated + \n",
    "    sequence_features_truncated_cont\n",
    ")\n",
    "    \n",
    "filtered_sessions = selected_features >> nvt.ops.Filter(f=lambda df: df[\"item_id-count\"] >= MINIMUM_SESSION_LENGTH)\n",
    "\n",
    "\n",
    "workflow = nvt.Workflow(filtered_sessions)\n",
    "dataset = nvt.Dataset(df, cpu=False)\n",
    "# Generating statistics for the features\n",
    "workflow.fit(dataset)\n",
    "# Applying the preprocessing and returning an NVTabular dataset\n",
    "sessions_ds = workflow.transform(dataset)\n",
    "# Converting the NVTabular dataset to a Dask cuDF dataframe (`to_ddf()`) and then to cuDF dataframe (`.compute()`)\n",
    "sessions_gdf = sessions_ds.to_ddf().compute()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4dcbca33",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item_id-count</th>\n",
       "      <th>day-first</th>\n",
       "      <th>session_id</th>\n",
       "      <th>item_id-list_trim</th>\n",
       "      <th>category-list_trim</th>\n",
       "      <th>timestamp/age_days-list_trim</th>\n",
       "      <th>timestamp/weekday/sin-list_trim</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>591</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>[36, 64, 32, 46, 2, 52, 8, 39, 11, 34, 86, 9, ...</td>\n",
       "      <td>[4, 7, 4, 5, 2, 6, 2, 5, 3, 4, 9, 2, 3, 2, 3, ...</td>\n",
       "      <td>[0.21271311423191075, 0.47673105314236597, 0.6...</td>\n",
       "      <td>[0.053377759448017814, 0.13143816418738208, 0....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>591</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>[9, 29, 15, 2, 3, 32, 18, 57, 29, 17, 38, 20, ...</td>\n",
       "      <td>[2, 4, 3, 2, 2, 4, 3, 6, 4, 3, 5, 3, 5, 5, 2, ...</td>\n",
       "      <td>[0.5194944043984934, 0.7865161467150079, 0.516...</td>\n",
       "      <td>[0.2768566421516725, 0.8165712246233945, 0.052...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>590</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>[16, 2, 3, 93, 36, 19, 25, 115, 3, 9, 49, 4, 2...</td>\n",
       "      <td>[3, 2, 2, 9, 4, 3, 4, 11, 2, 2, 5, 2, 4, 6, 4,...</td>\n",
       "      <td>[0.22325654804391093, 0.4402565281570716, 0.38...</td>\n",
       "      <td>[0.15944257060229772, 0.013476143111235905, 0....</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   item_id-count  day-first  session_id  \\\n",
       "0            591          2           2   \n",
       "1            591          3           3   \n",
       "2            590          1           4   \n",
       "\n",
       "                                   item_id-list_trim  \\\n",
       "0  [36, 64, 32, 46, 2, 52, 8, 39, 11, 34, 86, 9, ...   \n",
       "1  [9, 29, 15, 2, 3, 32, 18, 57, 29, 17, 38, 20, ...   \n",
       "2  [16, 2, 3, 93, 36, 19, 25, 115, 3, 9, 49, 4, 2...   \n",
       "\n",
       "                                  category-list_trim  \\\n",
       "0  [4, 7, 4, 5, 2, 6, 2, 5, 3, 4, 9, 2, 3, 2, 3, ...   \n",
       "1  [2, 4, 3, 2, 2, 4, 3, 6, 4, 3, 5, 3, 5, 5, 2, ...   \n",
       "2  [3, 2, 2, 9, 4, 3, 4, 11, 2, 2, 5, 2, 4, 6, 4,...   \n",
       "\n",
       "                        timestamp/age_days-list_trim  \\\n",
       "0  [0.21271311423191075, 0.47673105314236597, 0.6...   \n",
       "1  [0.5194944043984934, 0.7865161467150079, 0.516...   \n",
       "2  [0.22325654804391093, 0.4402565281570716, 0.38...   \n",
       "\n",
       "                     timestamp/weekday/sin-list_trim  \n",
       "0  [0.053377759448017814, 0.13143816418738208, 0....  \n",
       "1  [0.2768566421516725, 0.8165712246233945, 0.052...  \n",
       "2  [0.15944257060229772, 0.013476143111235905, 0....  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sessions_gdf.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "256a28f0-4c5e-4bd2-90ca-7b87d078b1ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item_id-count</th>\n",
       "      <th>day-first</th>\n",
       "      <th>session_id</th>\n",
       "      <th>item_id-list_trim</th>\n",
       "      <th>category-list_trim</th>\n",
       "      <th>timestamp/age_days-list_trim</th>\n",
       "      <th>timestamp/weekday/sin-list_trim</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>591</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>[36, 64, 32, 46, 2, 52, 8, 39, 11, 34, 86, 9, ...</td>\n",
       "      <td>[4, 7, 4, 5, 2, 6, 2, 5, 3, 4, 9, 2, 3, 2, 3, ...</td>\n",
       "      <td>[0.21271311423191075, 0.47673105314236597, 0.6...</td>\n",
       "      <td>[0.053377759448017814, 0.13143816418738208, 0....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>591</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>[9, 29, 15, 2, 3, 32, 18, 57, 29, 17, 38, 20, ...</td>\n",
       "      <td>[2, 4, 3, 2, 2, 4, 3, 6, 4, 3, 5, 3, 5, 5, 2, ...</td>\n",
       "      <td>[0.5194944043984934, 0.7865161467150079, 0.516...</td>\n",
       "      <td>[0.2768566421516725, 0.8165712246233945, 0.052...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>590</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>[16, 2, 3, 93, 36, 19, 25, 115, 3, 9, 49, 4, 2...</td>\n",
       "      <td>[3, 2, 2, 9, 4, 3, 4, 11, 2, 2, 5, 2, 4, 6, 4,...</td>\n",
       "      <td>[0.22325654804391093, 0.4402565281570716, 0.38...</td>\n",
       "      <td>[0.15944257060229772, 0.013476143111235905, 0....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>586</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>[14, 57, 33, 5, 37, 32, 23, 12, 16, 6, 2, 18, ...</td>\n",
       "      <td>[2, 6, 2, 2, 4, 4, 3, 3, 3, 2, 2, 3, 8, 4, 4, ...</td>\n",
       "      <td>[0.18777338652914055, 0.08833712160709273, 0.5...</td>\n",
       "      <td>[0.7812931683560106, 0.695332428683524, 0.2671...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>585</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>[9, 3, 9, 20, 8, 21, 5, 14, 17, 28, 44, 7, 6, ...</td>\n",
       "      <td>[2, 2, 2, 3, 2, 2, 2, 2, 3, 4, 5, 2, 2, 2, 2, ...</td>\n",
       "      <td>[0.2667778376163171, 0.19874899592419615, 0.96...</td>\n",
       "      <td>[0.1279905424403568, 0.3053465185768043, 0.115...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19995</th>\n",
       "      <td>423</td>\n",
       "      <td>6</td>\n",
       "      <td>19997</td>\n",
       "      <td>[4, 9, 30, 5, 39, 44, 38, 35, 23, 33, 29, 15, ...</td>\n",
       "      <td>[2, 2, 4, 2, 5, 5, 5, 4, 3, 2, 4, 3, 2, 2, 4, ...</td>\n",
       "      <td>[0.2560836092217609, 0.7392144962069372, 0.964...</td>\n",
       "      <td>[0.06957256834755166, 0.24973812345008561, 0.8...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19996</th>\n",
       "      <td>418</td>\n",
       "      <td>5</td>\n",
       "      <td>19998</td>\n",
       "      <td>[42, 44, 15, 25, 11, 14, 12, 6, 43, 20, 21, 7,...</td>\n",
       "      <td>[5, 5, 3, 4, 3, 2, 3, 2, 5, 3, 2, 2, 5, 3, 2, ...</td>\n",
       "      <td>[0.32242374775170035, 0.3521578965986265, 0.01...</td>\n",
       "      <td>[0.810882823365248, 0.3755043017054166, 0.0335...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19997</th>\n",
       "      <td>417</td>\n",
       "      <td>9</td>\n",
       "      <td>19999</td>\n",
       "      <td>[15, 80, 92, 65, 26, 60, 4, 24, 33, 7, 31, 8, ...</td>\n",
       "      <td>[3, 8, 9, 7, 4, 6, 2, 3, 2, 2, 4, 2, 3, 2, 2, ...</td>\n",
       "      <td>[0.6383723283573444, 0.46992993495954394, 0.50...</td>\n",
       "      <td>[0.14981384493192695, 0.8399144480397441, 0.80...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19998</th>\n",
       "      <td>417</td>\n",
       "      <td>6</td>\n",
       "      <td>20000</td>\n",
       "      <td>[18, 114, 17, 10, 37, 8, 11, 46, 31, 27, 47, 1...</td>\n",
       "      <td>[3, 11, 3, 2, 4, 2, 3, 5, 4, 4, 5, 3, 3, 2, 2,...</td>\n",
       "      <td>[0.7257596716963973, 0.6798788418415138, 0.343...</td>\n",
       "      <td>[0.6139737377326933, 0.10741147779168125, 0.98...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19999</th>\n",
       "      <td>415</td>\n",
       "      <td>6</td>\n",
       "      <td>20001</td>\n",
       "      <td>[10, 22, 7, 2, 52, 25, 36, 11, 21, 60, 62, 112...</td>\n",
       "      <td>[2, 3, 2, 2, 6, 4, 4, 3, 2, 6, 7, 11, 9, 4, 4,...</td>\n",
       "      <td>[0.4972217283120762, 0.5611688502393987, 0.436...</td>\n",
       "      <td>[0.9011375594889905, 0.8206514408500355, 0.404...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20000 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       item_id-count  day-first  session_id  \\\n",
       "0                591          2           2   \n",
       "1                591          3           3   \n",
       "2                590          1           4   \n",
       "3                586          8           5   \n",
       "4                585          6           6   \n",
       "...              ...        ...         ...   \n",
       "19995            423          6       19997   \n",
       "19996            418          5       19998   \n",
       "19997            417          9       19999   \n",
       "19998            417          6       20000   \n",
       "19999            415          6       20001   \n",
       "\n",
       "                                       item_id-list_trim  \\\n",
       "0      [36, 64, 32, 46, 2, 52, 8, 39, 11, 34, 86, 9, ...   \n",
       "1      [9, 29, 15, 2, 3, 32, 18, 57, 29, 17, 38, 20, ...   \n",
       "2      [16, 2, 3, 93, 36, 19, 25, 115, 3, 9, 49, 4, 2...   \n",
       "3      [14, 57, 33, 5, 37, 32, 23, 12, 16, 6, 2, 18, ...   \n",
       "4      [9, 3, 9, 20, 8, 21, 5, 14, 17, 28, 44, 7, 6, ...   \n",
       "...                                                  ...   \n",
       "19995  [4, 9, 30, 5, 39, 44, 38, 35, 23, 33, 29, 15, ...   \n",
       "19996  [42, 44, 15, 25, 11, 14, 12, 6, 43, 20, 21, 7,...   \n",
       "19997  [15, 80, 92, 65, 26, 60, 4, 24, 33, 7, 31, 8, ...   \n",
       "19998  [18, 114, 17, 10, 37, 8, 11, 46, 31, 27, 47, 1...   \n",
       "19999  [10, 22, 7, 2, 52, 25, 36, 11, 21, 60, 62, 112...   \n",
       "\n",
       "                                      category-list_trim  \\\n",
       "0      [4, 7, 4, 5, 2, 6, 2, 5, 3, 4, 9, 2, 3, 2, 3, ...   \n",
       "1      [2, 4, 3, 2, 2, 4, 3, 6, 4, 3, 5, 3, 5, 5, 2, ...   \n",
       "2      [3, 2, 2, 9, 4, 3, 4, 11, 2, 2, 5, 2, 4, 6, 4,...   \n",
       "3      [2, 6, 2, 2, 4, 4, 3, 3, 3, 2, 2, 3, 8, 4, 4, ...   \n",
       "4      [2, 2, 2, 3, 2, 2, 2, 2, 3, 4, 5, 2, 2, 2, 2, ...   \n",
       "...                                                  ...   \n",
       "19995  [2, 2, 4, 2, 5, 5, 5, 4, 3, 2, 4, 3, 2, 2, 4, ...   \n",
       "19996  [5, 5, 3, 4, 3, 2, 3, 2, 5, 3, 2, 2, 5, 3, 2, ...   \n",
       "19997  [3, 8, 9, 7, 4, 6, 2, 3, 2, 2, 4, 2, 3, 2, 2, ...   \n",
       "19998  [3, 11, 3, 2, 4, 2, 3, 5, 4, 4, 5, 3, 3, 2, 2,...   \n",
       "19999  [2, 3, 2, 2, 6, 4, 4, 3, 2, 6, 7, 11, 9, 4, 4,...   \n",
       "\n",
       "                            timestamp/age_days-list_trim  \\\n",
       "0      [0.21271311423191075, 0.47673105314236597, 0.6...   \n",
       "1      [0.5194944043984934, 0.7865161467150079, 0.516...   \n",
       "2      [0.22325654804391093, 0.4402565281570716, 0.38...   \n",
       "3      [0.18777338652914055, 0.08833712160709273, 0.5...   \n",
       "4      [0.2667778376163171, 0.19874899592419615, 0.96...   \n",
       "...                                                  ...   \n",
       "19995  [0.2560836092217609, 0.7392144962069372, 0.964...   \n",
       "19996  [0.32242374775170035, 0.3521578965986265, 0.01...   \n",
       "19997  [0.6383723283573444, 0.46992993495954394, 0.50...   \n",
       "19998  [0.7257596716963973, 0.6798788418415138, 0.343...   \n",
       "19999  [0.4972217283120762, 0.5611688502393987, 0.436...   \n",
       "\n",
       "                         timestamp/weekday/sin-list_trim  \n",
       "0      [0.053377759448017814, 0.13143816418738208, 0....  \n",
       "1      [0.2768566421516725, 0.8165712246233945, 0.052...  \n",
       "2      [0.15944257060229772, 0.013476143111235905, 0....  \n",
       "3      [0.7812931683560106, 0.695332428683524, 0.2671...  \n",
       "4      [0.1279905424403568, 0.3053465185768043, 0.115...  \n",
       "...                                                  ...  \n",
       "19995  [0.06957256834755166, 0.24973812345008561, 0.8...  \n",
       "19996  [0.810882823365248, 0.3755043017054166, 0.0335...  \n",
       "19997  [0.14981384493192695, 0.8399144480397441, 0.80...  \n",
       "19998  [0.6139737377326933, 0.10741147779168125, 0.98...  \n",
       "19999  [0.9011375594889905, 0.8206514408500355, 0.404...  \n",
       "\n",
       "[20000 rows x 7 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sessions_gdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "fa180273-7b89-499d-bce4-5681c994ac5f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0            2\n",
       "1            3\n",
       "2            4\n",
       "3            5\n",
       "4            6\n",
       "         ...  \n",
       "19995    19997\n",
       "19996    19998\n",
       "19997    19999\n",
       "19998    20000\n",
       "19999    20001\n",
       "Name: session_id, Length: 20000, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sessions_gdf['session_id']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2458c28f",
   "metadata": {},
   "source": [
    "It is possible to save the preprocessing workflow. That is useful to apply the same preprocessing to other data (with the same schema) and also to deploy the session-based recommendation pipeline to Triton Inference Server."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d237b8c3-5a66-49cb-b6de-97258db7577d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item_id-count</th>\n",
       "      <th>day-first</th>\n",
       "      <th>session_id</th>\n",
       "      <th>item_id-list_trim</th>\n",
       "      <th>category-list_trim</th>\n",
       "      <th>timestamp/age_days-list_trim</th>\n",
       "      <th>timestamp/weekday/sin-list_trim</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>591</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>[36, 64, 32, 46, 2, 52, 8, 39, 11, 34, 86, 9, ...</td>\n",
       "      <td>[4, 7, 4, 5, 2, 6, 2, 5, 3, 4, 9, 2, 3, 2, 3, ...</td>\n",
       "      <td>[0.21271311423191075, 0.47673105314236597, 0.6...</td>\n",
       "      <td>[0.053377759448017814, 0.13143816418738208, 0....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>591</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>[9, 29, 15, 2, 3, 32, 18, 57, 29, 17, 38, 20, ...</td>\n",
       "      <td>[2, 4, 3, 2, 2, 4, 3, 6, 4, 3, 5, 3, 5, 5, 2, ...</td>\n",
       "      <td>[0.5194944043984934, 0.7865161467150079, 0.516...</td>\n",
       "      <td>[0.2768566421516725, 0.8165712246233945, 0.052...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>590</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>[16, 2, 3, 93, 36, 19, 25, 115, 3, 9, 49, 4, 2...</td>\n",
       "      <td>[3, 2, 2, 9, 4, 3, 4, 11, 2, 2, 5, 2, 4, 6, 4,...</td>\n",
       "      <td>[0.22325654804391093, 0.4402565281570716, 0.38...</td>\n",
       "      <td>[0.15944257060229772, 0.013476143111235905, 0....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>586</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>[14, 57, 33, 5, 37, 32, 23, 12, 16, 6, 2, 18, ...</td>\n",
       "      <td>[2, 6, 2, 2, 4, 4, 3, 3, 3, 2, 2, 3, 8, 4, 4, ...</td>\n",
       "      <td>[0.18777338652914055, 0.08833712160709273, 0.5...</td>\n",
       "      <td>[0.7812931683560106, 0.695332428683524, 0.2671...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>585</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>[9, 3, 9, 20, 8, 21, 5, 14, 17, 28, 44, 7, 6, ...</td>\n",
       "      <td>[2, 2, 2, 3, 2, 2, 2, 2, 3, 4, 5, 2, 2, 2, 2, ...</td>\n",
       "      <td>[0.2667778376163171, 0.19874899592419615, 0.96...</td>\n",
       "      <td>[0.1279905424403568, 0.3053465185768043, 0.115...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19995</th>\n",
       "      <td>423</td>\n",
       "      <td>6</td>\n",
       "      <td>19997</td>\n",
       "      <td>[4, 9, 30, 5, 39, 44, 38, 35, 23, 33, 29, 15, ...</td>\n",
       "      <td>[2, 2, 4, 2, 5, 5, 5, 4, 3, 2, 4, 3, 2, 2, 4, ...</td>\n",
       "      <td>[0.2560836092217609, 0.7392144962069372, 0.964...</td>\n",
       "      <td>[0.06957256834755166, 0.24973812345008561, 0.8...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19996</th>\n",
       "      <td>418</td>\n",
       "      <td>5</td>\n",
       "      <td>19998</td>\n",
       "      <td>[42, 44, 15, 25, 11, 14, 12, 6, 43, 20, 21, 7,...</td>\n",
       "      <td>[5, 5, 3, 4, 3, 2, 3, 2, 5, 3, 2, 2, 5, 3, 2, ...</td>\n",
       "      <td>[0.32242374775170035, 0.3521578965986265, 0.01...</td>\n",
       "      <td>[0.810882823365248, 0.3755043017054166, 0.0335...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19997</th>\n",
       "      <td>417</td>\n",
       "      <td>9</td>\n",
       "      <td>19999</td>\n",
       "      <td>[15, 80, 92, 65, 26, 60, 4, 24, 33, 7, 31, 8, ...</td>\n",
       "      <td>[3, 8, 9, 7, 4, 6, 2, 3, 2, 2, 4, 2, 3, 2, 2, ...</td>\n",
       "      <td>[0.6383723283573444, 0.46992993495954394, 0.50...</td>\n",
       "      <td>[0.14981384493192695, 0.8399144480397441, 0.80...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19998</th>\n",
       "      <td>417</td>\n",
       "      <td>6</td>\n",
       "      <td>20000</td>\n",
       "      <td>[18, 114, 17, 10, 37, 8, 11, 46, 31, 27, 47, 1...</td>\n",
       "      <td>[3, 11, 3, 2, 4, 2, 3, 5, 4, 4, 5, 3, 3, 2, 2,...</td>\n",
       "      <td>[0.7257596716963973, 0.6798788418415138, 0.343...</td>\n",
       "      <td>[0.6139737377326933, 0.10741147779168125, 0.98...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19999</th>\n",
       "      <td>415</td>\n",
       "      <td>6</td>\n",
       "      <td>20001</td>\n",
       "      <td>[10, 22, 7, 2, 52, 25, 36, 11, 21, 60, 62, 112...</td>\n",
       "      <td>[2, 3, 2, 2, 6, 4, 4, 3, 2, 6, 7, 11, 9, 4, 4,...</td>\n",
       "      <td>[0.4972217283120762, 0.5611688502393987, 0.436...</td>\n",
       "      <td>[0.9011375594889905, 0.8206514408500355, 0.404...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20000 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       item_id-count  day-first  session_id  \\\n",
       "0                591          2           2   \n",
       "1                591          3           3   \n",
       "2                590          1           4   \n",
       "3                586          8           5   \n",
       "4                585          6           6   \n",
       "...              ...        ...         ...   \n",
       "19995            423          6       19997   \n",
       "19996            418          5       19998   \n",
       "19997            417          9       19999   \n",
       "19998            417          6       20000   \n",
       "19999            415          6       20001   \n",
       "\n",
       "                                       item_id-list_trim  \\\n",
       "0      [36, 64, 32, 46, 2, 52, 8, 39, 11, 34, 86, 9, ...   \n",
       "1      [9, 29, 15, 2, 3, 32, 18, 57, 29, 17, 38, 20, ...   \n",
       "2      [16, 2, 3, 93, 36, 19, 25, 115, 3, 9, 49, 4, 2...   \n",
       "3      [14, 57, 33, 5, 37, 32, 23, 12, 16, 6, 2, 18, ...   \n",
       "4      [9, 3, 9, 20, 8, 21, 5, 14, 17, 28, 44, 7, 6, ...   \n",
       "...                                                  ...   \n",
       "19995  [4, 9, 30, 5, 39, 44, 38, 35, 23, 33, 29, 15, ...   \n",
       "19996  [42, 44, 15, 25, 11, 14, 12, 6, 43, 20, 21, 7,...   \n",
       "19997  [15, 80, 92, 65, 26, 60, 4, 24, 33, 7, 31, 8, ...   \n",
       "19998  [18, 114, 17, 10, 37, 8, 11, 46, 31, 27, 47, 1...   \n",
       "19999  [10, 22, 7, 2, 52, 25, 36, 11, 21, 60, 62, 112...   \n",
       "\n",
       "                                      category-list_trim  \\\n",
       "0      [4, 7, 4, 5, 2, 6, 2, 5, 3, 4, 9, 2, 3, 2, 3, ...   \n",
       "1      [2, 4, 3, 2, 2, 4, 3, 6, 4, 3, 5, 3, 5, 5, 2, ...   \n",
       "2      [3, 2, 2, 9, 4, 3, 4, 11, 2, 2, 5, 2, 4, 6, 4,...   \n",
       "3      [2, 6, 2, 2, 4, 4, 3, 3, 3, 2, 2, 3, 8, 4, 4, ...   \n",
       "4      [2, 2, 2, 3, 2, 2, 2, 2, 3, 4, 5, 2, 2, 2, 2, ...   \n",
       "...                                                  ...   \n",
       "19995  [2, 2, 4, 2, 5, 5, 5, 4, 3, 2, 4, 3, 2, 2, 4, ...   \n",
       "19996  [5, 5, 3, 4, 3, 2, 3, 2, 5, 3, 2, 2, 5, 3, 2, ...   \n",
       "19997  [3, 8, 9, 7, 4, 6, 2, 3, 2, 2, 4, 2, 3, 2, 2, ...   \n",
       "19998  [3, 11, 3, 2, 4, 2, 3, 5, 4, 4, 5, 3, 3, 2, 2,...   \n",
       "19999  [2, 3, 2, 2, 6, 4, 4, 3, 2, 6, 7, 11, 9, 4, 4,...   \n",
       "\n",
       "                            timestamp/age_days-list_trim  \\\n",
       "0      [0.21271311423191075, 0.47673105314236597, 0.6...   \n",
       "1      [0.5194944043984934, 0.7865161467150079, 0.516...   \n",
       "2      [0.22325654804391093, 0.4402565281570716, 0.38...   \n",
       "3      [0.18777338652914055, 0.08833712160709273, 0.5...   \n",
       "4      [0.2667778376163171, 0.19874899592419615, 0.96...   \n",
       "...                                                  ...   \n",
       "19995  [0.2560836092217609, 0.7392144962069372, 0.964...   \n",
       "19996  [0.32242374775170035, 0.3521578965986265, 0.01...   \n",
       "19997  [0.6383723283573444, 0.46992993495954394, 0.50...   \n",
       "19998  [0.7257596716963973, 0.6798788418415138, 0.343...   \n",
       "19999  [0.4972217283120762, 0.5611688502393987, 0.436...   \n",
       "\n",
       "                         timestamp/weekday/sin-list_trim  \n",
       "0      [0.053377759448017814, 0.13143816418738208, 0....  \n",
       "1      [0.2768566421516725, 0.8165712246233945, 0.052...  \n",
       "2      [0.15944257060229772, 0.013476143111235905, 0....  \n",
       "3      [0.7812931683560106, 0.695332428683524, 0.2671...  \n",
       "4      [0.1279905424403568, 0.3053465185768043, 0.115...  \n",
       "...                                                  ...  \n",
       "19995  [0.06957256834755166, 0.24973812345008561, 0.8...  \n",
       "19996  [0.810882823365248, 0.3755043017054166, 0.0335...  \n",
       "19997  [0.14981384493192695, 0.8399144480397441, 0.80...  \n",
       "19998  [0.6139737377326933, 0.10741147779168125, 0.98...  \n",
       "19999  [0.9011375594889905, 0.8206514408500355, 0.404...  \n",
       "\n",
       "[20000 rows x 7 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sessions_gdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ff88e98f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#workflow.save('workflow_etl')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8172ab8d-9248-4a38-8483-6797df792ab8",
   "metadata": {},
   "source": [
    "The following will generate `schema.pbtxt` file in the provided folder."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e71dd078-6116-4ac2-ba6f-0207aaa8d417",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.8/dist-packages/cudf/core/frame.py:384: UserWarning: The deep parameter is ignored and is only included for pandas compatibility.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "workflow.fit_transform(dataset).to_parquet(os.path.join(INPUT_DATA_DIR, \"processed_nvt\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02a41961",
   "metadata": {},
   "source": [
    "## Export pre-processed data by day"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9cedca3",
   "metadata": {},
   "source": [
    "In this example we are going to split the preprocessed parquet files by days, to allow for temporal training and evaluation. There will be a folder for each day and three parquet files within each day folder: train.parquet, validation.parquet and test.parquet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "12d3e59b",
   "metadata": {},
   "outputs": [],
   "source": [
    "OUTPUT_DIR = os.environ.get(\"OUTPUT_DIR\",os.path.join(INPUT_DATA_DIR, \"sessions_by_day\"))\n",
    "!mkdir -p $OUTPUT_DIR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6c67a92b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Creating time-based splits: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:02<00:00,  4.22it/s]\n"
     ]
    }
   ],
   "source": [
    "from transformers4rec.data.preprocessing import save_time_based_splits\n",
    "save_time_based_splits(data=nvt.Dataset(sessions_gdf),\n",
    "                       output_dir= OUTPUT_DIR,\n",
    "                       partition_col='day-first',\n",
    "                       timestamp_col='session_id', \n",
    "                      )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b72337b",
   "metadata": {},
   "source": [
    "## Checking the preprocessed outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "dd04ec82",
   "metadata": {},
   "outputs": [],
   "source": [
    "TRAIN_PATHS = sorted(glob.glob(os.path.join(OUTPUT_DIR, \"1\", \"train.parquet\")))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "8e5e6358",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item_id-count</th>\n",
       "      <th>session_id</th>\n",
       "      <th>item_id-list_trim</th>\n",
       "      <th>category-list_trim</th>\n",
       "      <th>timestamp/age_days-list_trim</th>\n",
       "      <th>timestamp/weekday/sin-list_trim</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>590</td>\n",
       "      <td>4</td>\n",
       "      <td>[16, 2, 3, 93, 36, 19, 25, 115, 3, 9, 49, 4, 2...</td>\n",
       "      <td>[3, 2, 2, 9, 4, 3, 4, 11, 2, 2, 5, 2, 4, 6, 4,...</td>\n",
       "      <td>[0.22325654804391093, 0.4402565281570716, 0.38...</td>\n",
       "      <td>[0.15944257060229772, 0.013476143111235905, 0....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>582</td>\n",
       "      <td>8</td>\n",
       "      <td>[3, 34, 81, 12, 19, 48, 10, 15, 18, 19, 61, 33...</td>\n",
       "      <td>[2, 4, 8, 3, 3, 5, 2, 3, 3, 3, 7, 2, 4, 2, 5, ...</td>\n",
       "      <td>[0.01301034794234468, 0.8975850168095207, 0.11...</td>\n",
       "      <td>[0.37244707643279873, 0.6430649865767125, 0.84...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>579</td>\n",
       "      <td>10</td>\n",
       "      <td>[7, 5, 96, 36, 12, 10, 81, 54, 36, 120, 3, 69,...</td>\n",
       "      <td>[2, 2, 9, 4, 3, 2, 8, 6, 4, 12, 2, 7, 4, 6, 3,...</td>\n",
       "      <td>[0.2608925140795695, 0.7891122184433232, 0.302...</td>\n",
       "      <td>[0.8785835481938361, 0.7364014617152856, 0.896...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>569</td>\n",
       "      <td>30</td>\n",
       "      <td>[20, 56, 38, 14, 24, 34, 9, 26, 28, 14, 32, 9,...</td>\n",
       "      <td>[3, 6, 5, 2, 3, 4, 2, 4, 4, 2, 4, 2, 3, 4, 3, ...</td>\n",
       "      <td>[0.15751497487991506, 0.016492940806796086, 0....</td>\n",
       "      <td>[0.15627788549590182, 0.9837698990155679, 0.11...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>568</td>\n",
       "      <td>33</td>\n",
       "      <td>[31, 50, 36, 86, 4, 28, 35, 7, 133, 10, 36, 2,...</td>\n",
       "      <td>[4, 6, 4, 9, 2, 4, 4, 2, 13, 2, 4, 2, 2, 4, 3,...</td>\n",
       "      <td>[0.6335526717564155, 0.7895328077124247, 0.803...</td>\n",
       "      <td>[0.18652468074823958, 0.8376901269790153, 0.59...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2226</th>\n",
       "      <td>441</td>\n",
       "      <td>19927</td>\n",
       "      <td>[134, 94, 11, 47, 92, 277, 3, 6, 34, 4, 212, 1...</td>\n",
       "      <td>[13, 9, 3, 5, 9, 25, 2, 2, 4, 2, 19, 12, 3, 3,...</td>\n",
       "      <td>[0.07049606626554561, 0.6801535673513188, 0.25...</td>\n",
       "      <td>[0.15023170301789446, 0.6831186301779653, 0.80...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2227</th>\n",
       "      <td>441</td>\n",
       "      <td>19928</td>\n",
       "      <td>[6, 17, 9, 31, 42, 34, 21, 16, 39, 16, 42, 26,...</td>\n",
       "      <td>[2, 3, 2, 4, 5, 4, 2, 3, 5, 3, 5, 4, 2, 3, 3, ...</td>\n",
       "      <td>[0.943628011644158, 0.35946685478883145, 0.881...</td>\n",
       "      <td>[0.3740112539329261, 0.6214578812223325, 0.379...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2228</th>\n",
       "      <td>441</td>\n",
       "      <td>19929</td>\n",
       "      <td>[19, 14, 19, 98, 17, 5, 13, 26, 18, 2, 35, 3, ...</td>\n",
       "      <td>[3, 2, 3, 10, 3, 2, 3, 4, 3, 2, 4, 2, 2, 2, 6,...</td>\n",
       "      <td>[0.11114081502978823, 0.8287223990056634, 0.04...</td>\n",
       "      <td>[0.22701859646654832, 0.46340023643004713, 0.8...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2229</th>\n",
       "      <td>439</td>\n",
       "      <td>19942</td>\n",
       "      <td>[101, 14, 8, 30, 36, 41, 13, 9, 10, 82, 6, 195...</td>\n",
       "      <td>[10, 2, 2, 4, 4, 5, 3, 2, 2, 8, 2, 18, 3, 2, 4...</td>\n",
       "      <td>[0.9677378334614682, 0.005930902643004221, 0.0...</td>\n",
       "      <td>[0.29683409646692904, 0.3718404566751601, 0.03...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2230</th>\n",
       "      <td>438</td>\n",
       "      <td>19954</td>\n",
       "      <td>[164, 120, 34, 16, 7, 20, 49, 13, 74, 4, 33, 1...</td>\n",
       "      <td>[15, 12, 4, 3, 2, 3, 5, 3, 8, 2, 2, 3, 5, 3, 1...</td>\n",
       "      <td>[0.7573636520838789, 0.8658570560696931, 0.758...</td>\n",
       "      <td>[0.1346140801544553, 0.3068511774606606, 0.674...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1786 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      item_id-count  session_id  \\\n",
       "0               590           4   \n",
       "1               582           8   \n",
       "2               579          10   \n",
       "4               569          30   \n",
       "5               568          33   \n",
       "...             ...         ...   \n",
       "2226            441       19927   \n",
       "2227            441       19928   \n",
       "2228            441       19929   \n",
       "2229            439       19942   \n",
       "2230            438       19954   \n",
       "\n",
       "                                      item_id-list_trim  \\\n",
       "0     [16, 2, 3, 93, 36, 19, 25, 115, 3, 9, 49, 4, 2...   \n",
       "1     [3, 34, 81, 12, 19, 48, 10, 15, 18, 19, 61, 33...   \n",
       "2     [7, 5, 96, 36, 12, 10, 81, 54, 36, 120, 3, 69,...   \n",
       "4     [20, 56, 38, 14, 24, 34, 9, 26, 28, 14, 32, 9,...   \n",
       "5     [31, 50, 36, 86, 4, 28, 35, 7, 133, 10, 36, 2,...   \n",
       "...                                                 ...   \n",
       "2226  [134, 94, 11, 47, 92, 277, 3, 6, 34, 4, 212, 1...   \n",
       "2227  [6, 17, 9, 31, 42, 34, 21, 16, 39, 16, 42, 26,...   \n",
       "2228  [19, 14, 19, 98, 17, 5, 13, 26, 18, 2, 35, 3, ...   \n",
       "2229  [101, 14, 8, 30, 36, 41, 13, 9, 10, 82, 6, 195...   \n",
       "2230  [164, 120, 34, 16, 7, 20, 49, 13, 74, 4, 33, 1...   \n",
       "\n",
       "                                     category-list_trim  \\\n",
       "0     [3, 2, 2, 9, 4, 3, 4, 11, 2, 2, 5, 2, 4, 6, 4,...   \n",
       "1     [2, 4, 8, 3, 3, 5, 2, 3, 3, 3, 7, 2, 4, 2, 5, ...   \n",
       "2     [2, 2, 9, 4, 3, 2, 8, 6, 4, 12, 2, 7, 4, 6, 3,...   \n",
       "4     [3, 6, 5, 2, 3, 4, 2, 4, 4, 2, 4, 2, 3, 4, 3, ...   \n",
       "5     [4, 6, 4, 9, 2, 4, 4, 2, 13, 2, 4, 2, 2, 4, 3,...   \n",
       "...                                                 ...   \n",
       "2226  [13, 9, 3, 5, 9, 25, 2, 2, 4, 2, 19, 12, 3, 3,...   \n",
       "2227  [2, 3, 2, 4, 5, 4, 2, 3, 5, 3, 5, 4, 2, 3, 3, ...   \n",
       "2228  [3, 2, 3, 10, 3, 2, 3, 4, 3, 2, 4, 2, 2, 2, 6,...   \n",
       "2229  [10, 2, 2, 4, 4, 5, 3, 2, 2, 8, 2, 18, 3, 2, 4...   \n",
       "2230  [15, 12, 4, 3, 2, 3, 5, 3, 8, 2, 2, 3, 5, 3, 1...   \n",
       "\n",
       "                           timestamp/age_days-list_trim  \\\n",
       "0     [0.22325654804391093, 0.4402565281570716, 0.38...   \n",
       "1     [0.01301034794234468, 0.8975850168095207, 0.11...   \n",
       "2     [0.2608925140795695, 0.7891122184433232, 0.302...   \n",
       "4     [0.15751497487991506, 0.016492940806796086, 0....   \n",
       "5     [0.6335526717564155, 0.7895328077124247, 0.803...   \n",
       "...                                                 ...   \n",
       "2226  [0.07049606626554561, 0.6801535673513188, 0.25...   \n",
       "2227  [0.943628011644158, 0.35946685478883145, 0.881...   \n",
       "2228  [0.11114081502978823, 0.8287223990056634, 0.04...   \n",
       "2229  [0.9677378334614682, 0.005930902643004221, 0.0...   \n",
       "2230  [0.7573636520838789, 0.8658570560696931, 0.758...   \n",
       "\n",
       "                        timestamp/weekday/sin-list_trim  \n",
       "0     [0.15944257060229772, 0.013476143111235905, 0....  \n",
       "1     [0.37244707643279873, 0.6430649865767125, 0.84...  \n",
       "2     [0.8785835481938361, 0.7364014617152856, 0.896...  \n",
       "4     [0.15627788549590182, 0.9837698990155679, 0.11...  \n",
       "5     [0.18652468074823958, 0.8376901269790153, 0.59...  \n",
       "...                                                 ...  \n",
       "2226  [0.15023170301789446, 0.6831186301779653, 0.80...  \n",
       "2227  [0.3740112539329261, 0.6214578812223325, 0.379...  \n",
       "2228  [0.22701859646654832, 0.46340023643004713, 0.8...  \n",
       "2229  [0.29683409646692904, 0.3718404566751601, 0.03...  \n",
       "2230  [0.1346140801544553, 0.3068511774606606, 0.674...  \n",
       "\n",
       "[1786 rows x 6 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdf = cudf.read_parquet(TRAIN_PATHS[0])\n",
    "gdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "3193ca32-7ed0-42e4-aa04-dca05355a302",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item_id-count</th>\n",
       "      <th>day-first</th>\n",
       "      <th>session_id</th>\n",
       "      <th>item_id-list_trim</th>\n",
       "      <th>category-list_trim</th>\n",
       "      <th>timestamp/age_days-list_trim</th>\n",
       "      <th>timestamp/weekday/sin-list_trim</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>590</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>[16, 2, 3, 93, 36, 19, 25, 115, 3, 9, 49, 4, 2...</td>\n",
       "      <td>[3, 2, 2, 9, 4, 3, 4, 11, 2, 2, 5, 2, 4, 6, 4,...</td>\n",
       "      <td>[0.22325654804391093, 0.4402565281570716, 0.38...</td>\n",
       "      <td>[0.15944257060229772, 0.013476143111235905, 0....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>582</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>[3, 34, 81, 12, 19, 48, 10, 15, 18, 19, 61, 33...</td>\n",
       "      <td>[2, 4, 8, 3, 3, 5, 2, 3, 3, 3, 7, 2, 4, 2, 5, ...</td>\n",
       "      <td>[0.01301034794234468, 0.8975850168095207, 0.11...</td>\n",
       "      <td>[0.37244707643279873, 0.6430649865767125, 0.84...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>579</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>[7, 5, 96, 36, 12, 10, 81, 54, 36, 120, 3, 69,...</td>\n",
       "      <td>[2, 2, 9, 4, 3, 2, 8, 6, 4, 12, 2, 7, 4, 6, 3,...</td>\n",
       "      <td>[0.2608925140795695, 0.7891122184433232, 0.302...</td>\n",
       "      <td>[0.8785835481938361, 0.7364014617152856, 0.896...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>569</td>\n",
       "      <td>1</td>\n",
       "      <td>28</td>\n",
       "      <td>[38, 4, 15, 19, 65, 13, 47, 27, 58, 9, 12, 50,...</td>\n",
       "      <td>[5, 2, 3, 3, 7, 3, 5, 4, 6, 2, 3, 6, 3, 4, 2, ...</td>\n",
       "      <td>[0.9099012931226118, 0.5432874849122655, 0.852...</td>\n",
       "      <td>[0.08252283743485767, 0.18398521640641108, 0.8...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>569</td>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>[20, 56, 38, 14, 24, 34, 9, 26, 28, 14, 32, 9,...</td>\n",
       "      <td>[3, 6, 5, 2, 3, 4, 2, 4, 4, 2, 4, 2, 3, 4, 3, ...</td>\n",
       "      <td>[0.15751497487991506, 0.016492940806796086, 0....</td>\n",
       "      <td>[0.15627788549590182, 0.9837698990155679, 0.11...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19925</th>\n",
       "      <td>441</td>\n",
       "      <td>1</td>\n",
       "      <td>19927</td>\n",
       "      <td>[134, 94, 11, 47, 92, 277, 3, 6, 34, 4, 212, 1...</td>\n",
       "      <td>[13, 9, 3, 5, 9, 25, 2, 2, 4, 2, 19, 12, 3, 3,...</td>\n",
       "      <td>[0.07049606626554561, 0.6801535673513188, 0.25...</td>\n",
       "      <td>[0.15023170301789446, 0.6831186301779653, 0.80...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19926</th>\n",
       "      <td>441</td>\n",
       "      <td>1</td>\n",
       "      <td>19928</td>\n",
       "      <td>[6, 17, 9, 31, 42, 34, 21, 16, 39, 16, 42, 26,...</td>\n",
       "      <td>[2, 3, 2, 4, 5, 4, 2, 3, 5, 3, 5, 4, 2, 3, 3, ...</td>\n",
       "      <td>[0.943628011644158, 0.35946685478883145, 0.881...</td>\n",
       "      <td>[0.3740112539329261, 0.6214578812223325, 0.379...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19927</th>\n",
       "      <td>441</td>\n",
       "      <td>1</td>\n",
       "      <td>19929</td>\n",
       "      <td>[19, 14, 19, 98, 17, 5, 13, 26, 18, 2, 35, 3, ...</td>\n",
       "      <td>[3, 2, 3, 10, 3, 2, 3, 4, 3, 2, 4, 2, 2, 2, 6,...</td>\n",
       "      <td>[0.11114081502978823, 0.8287223990056634, 0.04...</td>\n",
       "      <td>[0.22701859646654832, 0.46340023643004713, 0.8...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19940</th>\n",
       "      <td>439</td>\n",
       "      <td>1</td>\n",
       "      <td>19942</td>\n",
       "      <td>[101, 14, 8, 30, 36, 41, 13, 9, 10, 82, 6, 195...</td>\n",
       "      <td>[10, 2, 2, 4, 4, 5, 3, 2, 2, 8, 2, 18, 3, 2, 4...</td>\n",
       "      <td>[0.9677378334614682, 0.005930902643004221, 0.0...</td>\n",
       "      <td>[0.29683409646692904, 0.3718404566751601, 0.03...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19952</th>\n",
       "      <td>438</td>\n",
       "      <td>1</td>\n",
       "      <td>19954</td>\n",
       "      <td>[164, 120, 34, 16, 7, 20, 49, 13, 74, 4, 33, 1...</td>\n",
       "      <td>[15, 12, 4, 3, 2, 3, 5, 3, 8, 2, 2, 3, 5, 3, 1...</td>\n",
       "      <td>[0.7573636520838789, 0.8658570560696931, 0.758...</td>\n",
       "      <td>[0.1346140801544553, 0.3068511774606606, 0.674...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2231 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       item_id-count  day-first  session_id  \\\n",
       "2                590          1           4   \n",
       "6                582          1           8   \n",
       "8                579          1          10   \n",
       "26               569          1          28   \n",
       "28               569          1          30   \n",
       "...              ...        ...         ...   \n",
       "19925            441          1       19927   \n",
       "19926            441          1       19928   \n",
       "19927            441          1       19929   \n",
       "19940            439          1       19942   \n",
       "19952            438          1       19954   \n",
       "\n",
       "                                       item_id-list_trim  \\\n",
       "2      [16, 2, 3, 93, 36, 19, 25, 115, 3, 9, 49, 4, 2...   \n",
       "6      [3, 34, 81, 12, 19, 48, 10, 15, 18, 19, 61, 33...   \n",
       "8      [7, 5, 96, 36, 12, 10, 81, 54, 36, 120, 3, 69,...   \n",
       "26     [38, 4, 15, 19, 65, 13, 47, 27, 58, 9, 12, 50,...   \n",
       "28     [20, 56, 38, 14, 24, 34, 9, 26, 28, 14, 32, 9,...   \n",
       "...                                                  ...   \n",
       "19925  [134, 94, 11, 47, 92, 277, 3, 6, 34, 4, 212, 1...   \n",
       "19926  [6, 17, 9, 31, 42, 34, 21, 16, 39, 16, 42, 26,...   \n",
       "19927  [19, 14, 19, 98, 17, 5, 13, 26, 18, 2, 35, 3, ...   \n",
       "19940  [101, 14, 8, 30, 36, 41, 13, 9, 10, 82, 6, 195...   \n",
       "19952  [164, 120, 34, 16, 7, 20, 49, 13, 74, 4, 33, 1...   \n",
       "\n",
       "                                      category-list_trim  \\\n",
       "2      [3, 2, 2, 9, 4, 3, 4, 11, 2, 2, 5, 2, 4, 6, 4,...   \n",
       "6      [2, 4, 8, 3, 3, 5, 2, 3, 3, 3, 7, 2, 4, 2, 5, ...   \n",
       "8      [2, 2, 9, 4, 3, 2, 8, 6, 4, 12, 2, 7, 4, 6, 3,...   \n",
       "26     [5, 2, 3, 3, 7, 3, 5, 4, 6, 2, 3, 6, 3, 4, 2, ...   \n",
       "28     [3, 6, 5, 2, 3, 4, 2, 4, 4, 2, 4, 2, 3, 4, 3, ...   \n",
       "...                                                  ...   \n",
       "19925  [13, 9, 3, 5, 9, 25, 2, 2, 4, 2, 19, 12, 3, 3,...   \n",
       "19926  [2, 3, 2, 4, 5, 4, 2, 3, 5, 3, 5, 4, 2, 3, 3, ...   \n",
       "19927  [3, 2, 3, 10, 3, 2, 3, 4, 3, 2, 4, 2, 2, 2, 6,...   \n",
       "19940  [10, 2, 2, 4, 4, 5, 3, 2, 2, 8, 2, 18, 3, 2, 4...   \n",
       "19952  [15, 12, 4, 3, 2, 3, 5, 3, 8, 2, 2, 3, 5, 3, 1...   \n",
       "\n",
       "                            timestamp/age_days-list_trim  \\\n",
       "2      [0.22325654804391093, 0.4402565281570716, 0.38...   \n",
       "6      [0.01301034794234468, 0.8975850168095207, 0.11...   \n",
       "8      [0.2608925140795695, 0.7891122184433232, 0.302...   \n",
       "26     [0.9099012931226118, 0.5432874849122655, 0.852...   \n",
       "28     [0.15751497487991506, 0.016492940806796086, 0....   \n",
       "...                                                  ...   \n",
       "19925  [0.07049606626554561, 0.6801535673513188, 0.25...   \n",
       "19926  [0.943628011644158, 0.35946685478883145, 0.881...   \n",
       "19927  [0.11114081502978823, 0.8287223990056634, 0.04...   \n",
       "19940  [0.9677378334614682, 0.005930902643004221, 0.0...   \n",
       "19952  [0.7573636520838789, 0.8658570560696931, 0.758...   \n",
       "\n",
       "                         timestamp/weekday/sin-list_trim  \n",
       "2      [0.15944257060229772, 0.013476143111235905, 0....  \n",
       "6      [0.37244707643279873, 0.6430649865767125, 0.84...  \n",
       "8      [0.8785835481938361, 0.7364014617152856, 0.896...  \n",
       "26     [0.08252283743485767, 0.18398521640641108, 0.8...  \n",
       "28     [0.15627788549590182, 0.9837698990155679, 0.11...  \n",
       "...                                                  ...  \n",
       "19925  [0.15023170301789446, 0.6831186301779653, 0.80...  \n",
       "19926  [0.3740112539329261, 0.6214578812223325, 0.379...  \n",
       "19927  [0.22701859646654832, 0.46340023643004713, 0.8...  \n",
       "19940  [0.29683409646692904, 0.3718404566751601, 0.03...  \n",
       "19952  [0.1346140801544553, 0.3068511774606606, 0.674...  \n",
       "\n",
       "[2231 rows x 7 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sessions_gdf[sessions_gdf['day-first'] == 1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6461a96",
   "metadata": {},
   "source": [
    "You have  just created session-level features to train a session-based recommendation model using NVTabular. Now you can move to the the next notebook,`02-session-based-XLNet-with-PyT.ipynb` to train a session-based recommendation model using [XLNet](https://arxiv.org/abs/1906.08237), one of the state-of-the-art NLP model."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
